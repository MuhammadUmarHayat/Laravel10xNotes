In Laravel, you can use a single form to handle both creating and updating data by determining
 whether you are dealing with a new record or an existing one. 
 Hereâ€™s how you can achieve this:

1. **Create a Form Blade Template:**
   Use a single Blade template for both creating and updating records. The form will conditionally set its action URL and method based on whether the record exists.

2. **Controller Methods:**
   Implement the logic in your controller to handle storing a new record and updating an existing one.

### Step-by-Step Example

#### 1. Blade Template (form.blade.php)
This template will be used for both creating and updating records.

```blade
<!-- resources/views/form.blade.php -->
<form action="{{ isset($user) ? route('users.update', $user->id) : route('users.store') }}" method="POST">
    @csrf
    @if(isset($user))
        @method('PUT')
    @endif

    <div>
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" value="{{ old('name', isset($user) ? $user->name : '') }}">
    </div>

    <div>
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" value="{{ old('email', isset($user) ? $user->email : '') }}">
    </div>

    <button type="submit">{{ isset($user) ? 'Update' : 'Create' }}</button>
</form>
```

#### 2. Routes (web.php)
Define the routes for creating, storing, editing, and updating the records.

```php
// routes/web.php
use App\Http\Controllers\UserController;

Route::get('/users/create', [UserController::class, 'create'])->name('users.create');
Route::post('/users', [UserController::class, 'store'])->name('users.store');
Route::get('/users/{user}/edit', [UserController::class, 'edit'])->name('users.edit');
Route::put('/users/{user}', [UserController::class, 'update'])->name('users.update');
```

#### 3. Controller (UserController.php)
Implement the methods to show the form and handle the create and update logic.

```php
// app/Http/Controllers/UserController.php
namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function create()
    {
        return view('form');
    }

    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:users',
        ]);

        User::create($request->all());

        return redirect()->route('users.create')->with('success', 'User created successfully.');
    }

    public function edit(User $user)
    {
        return view('form', compact('user'));
    }

    public function update(Request $request, User $user)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:users,email,' . $user->id,
        ]);

        $user->update($request->all());

        return redirect()->route('users.edit', $user->id)->with('success', 'User updated successfully.');
    }
}
```

### Explanation

1. **Blade Template:**
   - The form action URL and method are conditionally set based on whether `$user` is set.
   - `@csrf` is always included for security.
   - `@method('PUT')` is conditionally included for updating the record.
   - The form fields are pre-filled with the existing user's data if `$user` is set.

2. **Routes:**
   - Define routes for creating a new user, storing the user, editing an existing user, and updating the user.

3. **Controller:**
   - The `create` method returns the form view for creating a new user.
   - The `store` method handles the form submission for creating a new user.
   - The `edit` method returns the form view for editing an existing user, passing the user data to the view.
   - The `update` method handles the form submission for updating the user.

By using this approach, you can efficiently use one form for both creating and updating data in Laravel, reducing code duplication and improving maintainability.